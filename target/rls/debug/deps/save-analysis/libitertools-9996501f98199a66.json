{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"itertools","disambiguator":[8914626317797316098,15030791790254685957]},"crate_root":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src","external_crates":[{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[1199722385432260031,16923852427736526400]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[4456818277763453936,67358697071603557]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6935936073912039039,17505112870522826418]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":10,"id":{"name":"either","disambiguator":[8003183865332492255,2672778499441565457]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9732240414814819282,3284583514778001545]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[17655741400237088963,14133328044855482769]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[8269427387859724932,13582862897933669263]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[16658454255653303647,16077481814724534671]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14761782001302603588,1651588402434844138]}},{"file_name":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","num":3,"id":{"name":"alloc","disambiguator":[677047112157745962,2106014022401311196]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":65347,"line_start":1,"line_end":1983,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":10,"index":62},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":825,"byte_end":831,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"name":"Either","value":""},{"kind":"Use","ref_id":{"krate":2,"index":1631},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1113,"byte_end":1123,"line_start":47,"line_end":47,"column_start":22,"column_end":32},"name":"__std_iter","value":""},{"kind":"Use","ref_id":{"krate":0,"index":757},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1581,"byte_end":1593,"line_start":71,"line_end":71,"column_start":23,"column_end":35},"name":"MultiProduct","value":""},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1653,"byte_end":1665,"line_start":73,"line_end":73,"column_start":27,"column_end":39},"name":"Combinations","value":""},{"kind":"Use","ref_id":{"krate":0,"index":303},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1697,"byte_end":1707,"line_start":74,"line_end":74,"column_start":31,"column_end":41},"name":"ConsTuples","value":""},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1886,"byte_end":1897,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"name":"Intersperse","value":""},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2000,"byte_end":2011,"line_start":81,"line_end":81,"column_start":25,"column_end":36},"name":"MergeJoinBy","value":""},{"kind":"Use","ref_id":{"krate":0,"index":943},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2073,"byte_end":2082,"line_start":83,"line_end":83,"column_start":29,"column_end":38},"name":"MultiPeek","value":""},{"kind":"Use","ref_id":{"krate":0,"index":948},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2106,"byte_end":2114,"line_start":84,"line_end":84,"column_start":23,"column_end":31},"name":"PadUsing","value":""},{"kind":"Use","ref_id":{"krate":0,"index":499},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2148,"byte_end":2164,"line_start":85,"line_end":85,"column_start":33,"column_end":49},"name":"PeekingTakeWhile","value":""},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2200,"byte_end":2214,"line_start":86,"line_end":86,"column_start":35,"column_end":49},"name":"ProcessResults","value":""},{"kind":"Use","ref_id":{"krate":0,"index":971},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2277,"byte_end":2285,"line_start":88,"line_end":88,"column_start":30,"column_end":38},"name":"PutBackN","value":""},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2344,"byte_end":2350,"line_start":90,"line_end":90,"column_start":26,"column_end":32},"name":"RcIter","value":""},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2373,"byte_end":2380,"line_start":91,"line_end":91,"column_start":22,"column_end":29},"name":"RepeatN","value":""},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2483,"byte_end":2486,"line_start":94,"line_end":94,"column_start":18,"column_end":21},"name":"Tee","value":""},{"kind":"Use","ref_id":{"krate":0,"index":652},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2653,"byte_end":2665,"line_start":98,"line_end":98,"column_start":28,"column_end":40},"name":"WithPosition","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2692,"byte_end":2697,"line_start":99,"line_end":99,"column_start":26,"column_end":31},"name":"ZipEq","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1037},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2724,"byte_end":2734,"line_start":100,"line_end":100,"column_start":26,"column_end":36},"name":"ZipLongest","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1040},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2758,"byte_end":2761,"line_start":101,"line_end":101,"column_start":23,"column_end":26},"name":"Zip","value":""},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2782,"byte_end":2783,"line_start":103,"line_end":103,"column_start":18,"column_end":19},"name":"*","value":"Interleave, UniqueBy, Tuples, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, MultiProduct, Flatten, WhileSome, Merge, Batching, ZipEq, InterleaveShortest, PutBackN, PadUsing, KMergeBy, Intersperse, FormatWith, Positions, Coalesce, MergeBy, Step, Product, WithPosition, Dedup, Unique, TupleWindows, Tee, Combinations, Update, TupleCombinations, TakeWhileRef, ZipLongest, MapResults, PutBack"},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2806,"byte_end":2812,"line_start":104,"line_end":104,"column_start":22,"column_end":28},"name":"concat","value":""},{"kind":"Use","ref_id":{"krate":0,"index":306},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2840,"byte_end":2851,"line_start":105,"line_end":105,"column_start":27,"column_end":38},"name":"cons_tuples","value":""},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2867,"byte_end":2876,"line_start":106,"line_end":106,"column_start":15,"column_end":24},"name":"diff_with","value":""},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2892,"byte_end":2896,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"name":"Diff","value":""},{"kind":"Use","ref_id":{"krate":0,"index":934},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2976,"byte_end":2988,"line_start":110,"line_end":110,"column_start":17,"column_end":29},"name":"MinMaxResult","value":""},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3018,"byte_end":3029,"line_start":111,"line_end":111,"column_start":29,"column_end":40},"name":"PeekingNext","value":""},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3061,"byte_end":3076,"line_start":112,"line_end":112,"column_start":31,"column_end":46},"name":"process_results","value":""},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3095,"byte_end":3103,"line_start":113,"line_end":113,"column_start":18,"column_end":26},"name":"repeat_n","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3177,"byte_end":3185,"line_start":115,"line_end":115,"column_start":24,"column_end":32},"name":"Position","value":""},{"kind":"Use","ref_id":{"krate":0,"index":687},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3205,"byte_end":3213,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"name":"multizip","value":""},{"kind":"Use","ref_id":{"krate":0,"index":854},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3273,"byte_end":3285,"line_start":119,"line_end":119,"column_start":25,"column_end":37},"name":"EitherOrBoth","value":""},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105632,"byte_end":105642,"line_start":18,"line_end":18,"column_start":26,"column_end":36},"name":"put_back_n","value":""},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105696,"byte_end":105705,"line_start":20,"line_end":20,"column_start":25,"column_end":34},"name":"multipeek","value":""},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105756,"byte_end":105762,"line_start":22,"line_end":22,"column_start":22,"column_end":28},"name":"kmerge","value":""},{"kind":"Use","ref_id":{"krate":0,"index":663},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105785,"byte_end":105791,"line_start":23,"line_end":23,"column_start":22,"column_end":28},"name":"zip_eq","value":""},{"kind":"Use","ref_id":{"krate":0,"index":449},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105813,"byte_end":105826,"line_start":24,"line_end":24,"column_start":21,"column_end":34},"name":"merge_join_by","value":""},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":105877,"byte_end":105883,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"name":"rciter","value":""},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3345,"byte_end":3346,"line_start":123,"line_end":123,"column_start":15,"column_end":16},"name":"*","value":"merge_join_by, interleave, fold, merge, zip_eq, kmerge"}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":65347,"line_start":1,"line_end":1983,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":307},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":340},{"krate":0,"index":406},{"krate":0,"index":414},{"krate":0,"index":442},{"krate":0,"index":455},{"krate":0,"index":459},{"krate":0,"index":476},{"krate":0,"index":487},{"krate":0,"index":506},{"krate":0,"index":513},{"krate":0,"index":522},{"krate":0,"index":540},{"krate":0,"index":550},{"krate":0,"index":561},{"krate":0,"index":583},{"krate":0,"index":596},{"krate":0,"index":627},{"krate":0,"index":648},{"krate":0,"index":661},{"krate":0,"index":669},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":1099},{"krate":0,"index":1104},{"krate":0,"index":1102},{"krate":0,"index":1100},{"krate":0,"index":754}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1167,"byte_end":1174,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":757},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":99090,"byte_end":99102,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":99005,"byte_end":99078,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":763},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":66759,"byte_end":66769,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":2147484319},{"krate":0,"index":2147484320},{"krate":0,"index":2147484321}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":66674,"byte_end":66747,"line_start":35,"line_end":35,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":67099,"byte_end":67109,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":768},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":68374,"byte_end":68392,"line_start":99,"line_end":99,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":2147484328},{"krate":0,"index":2147484329},{"krate":0,"index":2147484330}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":68289,"byte_end":68362,"line_start":98,"line_end":98,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":70794,"byte_end":70801,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":2147484337},{"krate":0,"index":2147484338}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":70938,"byte_end":70946,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":71195,"byte_end":71205,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":71361,"byte_end":71371,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":71636,"byte_end":71644,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":73105,"byte_end":73112,"line_start":277,"line_end":277,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":2147484342},{"krate":0,"index":2147484343},{"krate":0,"index":2147484344},{"krate":0,"index":2147484345}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":73020,"byte_end":73093,"line_start":276,"line_end":276,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":783},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":75951,"byte_end":75959,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":2147484352},{"krate":0,"index":2147484353}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":75866,"byte_end":75939,"line_start":372,"line_end":372,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":787},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":77000,"byte_end":77004,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":2147484358},{"krate":0,"index":2147484359}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":76915,"byte_end":76988,"line_start":412,"line_end":412,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":169},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":79752,"byte_end":79757,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":2147483715}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":79667,"byte_end":79740,"line_start":526,"line_end":526,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":173},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":80545,"byte_end":80550,"line_start":563,"line_end":563,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":81623,"byte_end":81630,"line_start":600,"line_end":600,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":2147483727},{"krate":0,"index":2147483728}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":81538,"byte_end":81611,"line_start":599,"line_end":599,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":84181,"byte_end":84189,"line_start":701,"line_end":701,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":2147483746},{"krate":0,"index":2147483747}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":84096,"byte_end":84169,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":199},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":85420,"byte_end":85425,"line_start":756,"line_end":756,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":2147483758}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":85335,"byte_end":85408,"line_start":755,"line_end":755,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":87136,"byte_end":87148,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":2147483768},{"krate":0,"index":2147483769}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":87051,"byte_end":87124,"line_start":828,"line_end":828,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":802},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":88521,"byte_end":88530,"line_start":880,"line_end":880,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":2147484368}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":88436,"byte_end":88509,"line_start":879,"line_end":879,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":89381,"byte_end":89398,"line_start":914,"line_end":914,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":2147484372},{"krate":0,"index":2147484373},{"krate":0,"index":2147484374}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":89296,"byte_end":89369,"line_start":913,"line_end":913,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":221},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":89549,"byte_end":89563,"line_start":923,"line_end":923,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>:  Sized","parent":null,"children":[{"krate":0,"index":222}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":222},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":89585,"byte_end":89596,"line_start":924,"line_end":924,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":810},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":90217,"byte_end":90234,"line_start":952,"line_end":952,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":2147484379}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":849},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":92928,"byte_end":92935,"line_start":1043,"line_end":1043,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":2147484421},{"krate":0,"index":2147484422}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":92843,"byte_end":92916,"line_start":1042,"line_end":1042,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":94417,"byte_end":94427,"line_start":1096,"line_end":1096,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":2147483800},{"krate":0,"index":2147483801}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":94332,"byte_end":94405,"line_start":1095,"line_end":1095,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":248},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":95718,"byte_end":95727,"line_start":1145,"line_end":1145,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":2147483820},{"krate":0,"index":2147483821},{"krate":0,"index":2147483822}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":95633,"byte_end":95706,"line_start":1144,"line_end":1144,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":97143,"byte_end":97149,"line_start":1203,"line_end":1203,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":2147483831},{"krate":0,"index":2147483832}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":97058,"byte_end":97131,"line_start":1202,"line_end":1202,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484429},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":105030,"byte_end":105034,"line_start":5,"line_end":5,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484432},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":105098,"byte_end":105102,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484434},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":105164,"byte_end":105169,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":854},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":104972,"byte_end":104984,"line_start":3,"line_end":3,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":2147484429},{"krate":0,"index":2147484432},{"krate":0,"index":2147484434}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":104963,"byte_end":105175,"line_start":3,"line_end":10,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":269},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"C:\\Users\\turnage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.7.6\\src\\free.rs","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":106124,"byte_end":106133,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":106455,"byte_end":106458,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":106859,"byte_end":106862,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":107242,"byte_end":107247,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":107670,"byte_end":107676,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":108064,"byte_end":108068,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":291},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":108443,"byte_end":108446,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":292},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":108806,"byte_end":108809,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":109134,"byte_end":109137,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":109450,"byte_end":109453,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":295},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":109846,"byte_end":109850,"line_start":207,"line_end":207,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":109811,"byte_end":109838,"line_start":206,"line_end":206,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":110303,"byte_end":110309,"line_start":225,"line_end":225,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> Vec<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Collect all the iterable's elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":110268,"byte_end":110295,"line_start":224,"line_end":224,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":300},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,110,99,97,116,95,105,109,112,108,46,114,115],"byte_start":110934,"byte_end":110940,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":303},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":112699,"byte_end":112709,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":2147483871}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":112614,"byte_end":112687,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":306},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":113050,"byte_end":113061,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":113486,"byte_end":113498,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":2147483878},{"krate":0,"index":2147483879},{"krate":0,"index":2147483880},{"krate":0,"index":2147483881}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":113401,"byte_end":113474,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483889},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":117939,"byte_end":117952,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483893},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":118085,"byte_end":118092,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147483896},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":118213,"byte_end":118219,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":327},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":117736,"byte_end":117740,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":2147483889},{"krate":0,"index":2147483893},{"krate":0,"index":2147483896}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":118968,"byte_end":118977,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":120097,"byte_end":120107,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":2147483905},{"krate":0,"index":2147483906}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":120530,"byte_end":120536,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":2147484559},{"krate":0,"index":2147484560}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":346},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123249,"byte_end":123252,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":368},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":132701,"byte_end":132708,"line_start":288,"line_end":288,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":2147483954},{"krate":0,"index":2147483955}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":132616,"byte_end":132689,"line_start":287,"line_end":287,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":134575,"byte_end":134581,"line_start":358,"line_end":358,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":2147483969}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":134490,"byte_end":134563,"line_start":357,"line_end":357,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":135449,"byte_end":135454,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":2147483979},{"krate":0,"index":2147483980},{"krate":0,"index":2147483981}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":137389,"byte_end":137399,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":2147483995},{"krate":0,"index":2147483996}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":137304,"byte_end":137377,"line_start":463,"line_end":463,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":396},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138522,"byte_end":138528,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":2147484001}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138437,"byte_end":138510,"line_start":508,"line_end":508,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139246,"byte_end":139251,"line_start":540,"line_end":540,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":2147484007},{"krate":0,"index":2147484008},{"krate":0,"index":2147484009}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":140278,"byte_end":140289,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":2147484585},{"krate":0,"index":2147484586},{"krate":0,"index":2147484587}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":140193,"byte_end":140266,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":144459,"byte_end":144465,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":2147484028}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":144374,"byte_end":144447,"line_start":112,"line_end":112,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":144843,"byte_end":144849,"line_start":131,"line_end":131,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn <I> (iterable: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":436},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":146503,"byte_end":146511,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":2147484037},{"krate":0,"index":2147484038}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":146418,"byte_end":146491,"line_start":187,"line_end":187,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":146738,"byte_end":146747,"line_start":198,"line_end":198,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn <I, F> (iterable: I, mut less_than: F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":449},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":148456,"byte_end":148469,"line_start":10,"line_end":10,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":149095,"byte_end":149106,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":2147484052},{"krate":0,"index":2147484053},{"krate":0,"index":2147484054}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":149010,"byte_end":149083,"line_start":26,"line_end":26,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484590},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":150877,"byte_end":150887,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484591},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":150969,"byte_end":150979,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484593},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":151092,"byte_end":151098,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":934},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":150832,"byte_end":150844,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":2147484590},{"krate":0,"index":2147484591},{"krate":0,"index":2147484593}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":150823,"byte_end":151106,"line_start":5,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":151916,"byte_end":151927,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":943},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":154727,"byte_end":154736,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":2147484601},{"krate":0,"index":2147484602},{"krate":0,"index":2147484603}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":464},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":154962,"byte_end":154971,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"fn <I> (iterable: I) -> MultiPeek<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":155253,"byte_end":155263,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":155527,"byte_end":155531,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":157330,"byte_end":157338,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":2147484607},{"krate":0,"index":2147484608},{"krate":0,"index":2147484609},{"krate":0,"index":2147484610}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":157245,"byte_end":157318,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":491},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":159536,"byte_end":159547,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext:  Iterator","parent":null,"children":[{"krate":0,"index":492}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":159731,"byte_end":159743,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":499},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":161262,"byte_end":161278,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":2147484088},{"krate":0,"index":2147484089}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":161177,"byte_end":161250,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":507},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":163747,"byte_end":163761,"line_start":8,"line_end":8,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":2147484098},{"krate":0,"index":2147484099}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":163662,"byte_end":163735,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":165666,"byte_end":165681,"line_start":70,"line_end":70,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":971},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":166205,"byte_end":166213,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2147484640},{"krate":0,"index":2147484641}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":166416,"byte_end":166426,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"fn <I> (iterable: I) -> PutBackN<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":167009,"byte_end":167017,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":526},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":167631,"byte_end":167637,"line_start":7,"line_end":7,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2147484116}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147484116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":167679,"byte_end":167685,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":168954,"byte_end":168960,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":170450,"byte_end":170457,"line_start":6,"line_end":6,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2147484125},{"krate":0,"index":2147484126}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":170373,"byte_end":170438,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":170574,"byte_end":170582,"line_start":12,"line_end":12,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":564},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":174193,"byte_end":174203,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":2147484135}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":174895,"byte_end":174906,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":571},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":176513,"byte_end":176519,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":978},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":176945,"byte_end":176951,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2147484645},{"krate":0,"index":2147484646}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":176868,"byte_end":176933,"line_start":114,"line_end":114,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2147484646},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177059,"byte_end":177064,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":981},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177724,"byte_end":177731,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2147484651},{"krate":0,"index":2147484652}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177647,"byte_end":177712,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":582},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":178488,"byte_end":178495,"line_start":180,"line_end":180,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,101,101,46,114,115],"byte_start":179182,"byte_end":179185,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2147484161},{"krate":0,"index":2147484162}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,101,101,46,114,115],"byte_start":179097,"byte_end":179170,"line_start":18,"line_end":18,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":181014,"byte_end":181025,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2147484167},{"krate":0,"index":2147484168}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":182251,"byte_end":182257,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":2147484174},{"krate":0,"index":2147484175}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":182166,"byte_end":182239,"line_start":63,"line_end":63,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":183296,"byte_end":183307,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":183654,"byte_end":183666,"line_start":119,"line_end":119,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2147484184},{"krate":0,"index":2147484185}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":183569,"byte_end":183642,"line_start":118,"line_end":118,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":619},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":184963,"byte_end":184975,"line_start":172,"line_end":172,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect:  Sized","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":620},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":184994,"byte_end":184998,"line_start":173,"line_end":173,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":621},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":185009,"byte_end":185015,"line_start":174,"line_end":174,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":185094,"byte_end":185111,"line_start":176,"line_end":176,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":185222,"byte_end":185246,"line_start":179,"line_end":179,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":185333,"byte_end":185342,"line_start":182,"line_end":182,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":185363,"byte_end":185378,"line_start":184,"line_end":184,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1017},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":188105,"byte_end":188113,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2147484673},{"krate":0,"index":2147484674},{"krate":0,"index":2147484675}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":188020,"byte_end":188093,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1021},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":191101,"byte_end":191107,"line_start":123,"line_end":123,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2147484682}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":191016,"byte_end":191089,"line_start":122,"line_end":122,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":652},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":191908,"byte_end":191920,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":2147484210},{"krate":0,"index":2147484211}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":191823,"byte_end":191896,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484685},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192537,"byte_end":192542,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":1025},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484687},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192607,"byte_end":192613,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":1025},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484689},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192656,"byte_end":192660,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":1025},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484691},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192703,"byte_end":192707,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":1025},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1025},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192484,"byte_end":192492,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":2147484685},{"krate":0,"index":2147484687},{"krate":0,"index":2147484689},{"krate":0,"index":2147484691}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192475,"byte_end":192713,"line_start":31,"line_end":40,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192780,"byte_end":192790,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":194589,"byte_end":194594,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2147484698},{"krate":0,"index":2147484699}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":194504,"byte_end":194577,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":194969,"byte_end":194975,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1037},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":196393,"byte_end":196403,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2147484704},{"krate":0,"index":2147484705}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":196308,"byte_end":196381,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1040},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":198420,"byte_end":198423,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2147484710}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":198335,"byte_end":198408,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":199587,"byte_end":199595,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":691},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7976,"byte_end":7985,"line_start":278,"line_end":278,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools:  Iterator","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8384,"byte_end":8394,"line_start":293,"line_end":293,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8917,"byte_end":8936,"line_start":311,"line_end":311,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9515,"byte_end":9526,"line_start":330,"line_end":330,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10769,"byte_end":10780,"line_start":364,"line_end":364,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11218,"byte_end":11224,"line_start":377,"line_end":377,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12139,"byte_end":12147,"line_start":407,"line_end":407,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13778,"byte_end":13786,"line_start":448,"line_end":448,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15065,"byte_end":15071,"line_start":484,"line_end":484,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn (self, size: usize) -> IntoChunks<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16427,"byte_end":16440,"line_start":522,"line_end":522,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17749,"byte_end":17755,"line_start":561,"line_end":561,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18564,"byte_end":18567,"line_start":586,"line_end":586,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19205,"byte_end":19209,"line_start":609,"line_end":609,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19726,"byte_end":19737,"line_start":626,"line_end":626,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20400,"byte_end":20405,"line_start":647,"line_end":647,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21182,"byte_end":21190,"line_start":671,"line_end":671,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22780,"byte_end":22793,"line_start":711,"line_end":711,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23627,"byte_end":23633,"line_start":737,"line_end":737,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24638,"byte_end":24647,"line_start":766,"line_end":766,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn <F> (self, first: F) -> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":25399,"byte_end":25416,"line_start":787,"line_end":787,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26871,"byte_end":26894,"line_start":822,"line_end":822,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"fn (self) -> MultiProduct<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":28387,"byte_end":28395,"line_start":859,"line_end":859,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":29109,"byte_end":29114,"line_start":881,"line_end":881,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":29805,"byte_end":29811,"line_start":903,"line_end":903,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30568,"byte_end":30577,"line_start":925,"line_end":925,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":31314,"byte_end":31332,"line_start":945,"line_end":945,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":32278,"byte_end":32292,"line_start":970,"line_end":970,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":32958,"byte_end":32968,"line_start":991,"line_end":991,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":34399,"byte_end":34417,"line_start":1030,"line_end":1030,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":35223,"byte_end":35235,"line_start":1056,"line_end":1056,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self, n: usize) -> Combinations<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":36065,"byte_end":36074,"line_start":1080,"line_end":1080,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":36638,"byte_end":36645,"line_start":1100,"line_end":1100,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn (self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":37570,"byte_end":37583,"line_start":1126,"line_end":1126,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":38262,"byte_end":38271,"line_start":1145,"line_end":1145,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":38824,"byte_end":38830,"line_start":1162,"line_end":1162,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":39455,"byte_end":39465,"line_start":1183,"line_end":1183,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":40207,"byte_end":40220,"line_start":1208,"line_end":1208,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":40901,"byte_end":40914,"line_start":1232,"line_end":1232,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":41763,"byte_end":41772,"line_start":1261,"line_end":1261,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":42452,"byte_end":42460,"line_start":1282,"line_end":1282,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":43153,"byte_end":43166,"line_start":1306,"line_end":1306,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":43889,"byte_end":43896,"line_start":1333,"line_end":1333,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":44559,"byte_end":44565,"line_start":1353,"line_end":1353,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":44893,"byte_end":44904,"line_start":1363,"line_end":1363,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":45521,"byte_end":45529,"line_start":1385,"line_end":1385,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":46273,"byte_end":46277,"line_start":1411,"line_end":1411,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":47405,"byte_end":47411,"line_start":1445,"line_end":1445,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":48889,"byte_end":48900,"line_start":1483,"line_end":1483,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":50621,"byte_end":50633,"line_start":1532,"line_end":1532,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":51790,"byte_end":51802,"line_start":1564,"line_end":1564,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":52602,"byte_end":52607,"line_start":1589,"line_end":1589,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54121,"byte_end":54131,"line_start":1635,"line_end":1635,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":55073,"byte_end":55079,"line_start":1663,"line_end":1663,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":55975,"byte_end":55984,"line_start":1691,"line_end":1691,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> Vec<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":56967,"byte_end":56980,"line_start":1722,"line_end":1722,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"fn <K, F> (self, f: F) -> Vec<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":57925,"byte_end":57938,"line_start":1754,"line_end":1754,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":59745,"byte_end":59751,"line_start":1808,"line_end":1808,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":60447,"byte_end":60460,"line_start":1825,"line_end":1825,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":61098,"byte_end":61107,"line_start":1839,"line_end":1839,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":61836,"byte_end":61841,"line_start":1863,"line_end":1863,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":62661,"byte_end":62673,"line_start":1891,"line_end":1891,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":63900,"byte_end":63909,"line_start":1933,"line_end":1933,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484821},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64830,"byte_end":64838,"line_start":1963,"line_end":1963,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":1099},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147484823},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64899,"byte_end":64903,"line_start":1965,"line_end":1965,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":1099},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1099},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64770,"byte_end":64779,"line_start":1961,"line_end":1961,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":2147484821},{"krate":0,"index":2147484823}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64761,"byte_end":64909,"line_start":1961,"line_end":1966,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64995,"byte_end":65005,"line_start":1970,"line_end":1970,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":65198,"byte_end":65205,"line_start":1977,"line_end":1977,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3310,"byte_end":3314,"line_start":121,"line_end":121,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":269}}],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":100080,"byte_end":100092,"line_start":49,"line_end":49,"column_start":9,"column_end":21},"kind":"Impl","from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":102198,"byte_end":102214,"line_start":116,"line_end":116,"column_start":9,"column_end":25},"kind":"Impl","from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":102862,"byte_end":102874,"line_start":145,"line_end":145,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":757},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":67412,"byte_end":67422,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":763},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":68833,"byte_end":68851,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"kind":"Impl","from":{"krate":0,"index":768},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":71101,"byte_end":71108,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"kind":"Impl","from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":71727,"byte_end":71734,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":773},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":73581,"byte_end":73588,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":778},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":76020,"byte_end":76028,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":783},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":76256,"byte_end":76264,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":783},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":77304,"byte_end":77308,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":787},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":77906,"byte_end":77910,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":787},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":78126,"byte_end":78135,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":163},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":78367,"byte_end":78376,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"kind":"Impl","from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":79879,"byte_end":79884,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":169},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":80121,"byte_end":80126,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":169},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":80932,"byte_end":80937,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":169},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":81775,"byte_end":81782,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"kind":"Impl","from":{"krate":0,"index":178},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":82307,"byte_end":82314,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":178},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":82582,"byte_end":82589,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":178},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":83049,"byte_end":83061,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"kind":"Impl","from":{"krate":0,"index":794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":84295,"byte_end":84303,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":190},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":84472,"byte_end":84480,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":190},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":84867,"byte_end":84875,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":190},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":85508,"byte_end":85513,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":199},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":85877,"byte_end":85882,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"kind":"Impl","from":{"krate":0,"index":199},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":86015,"byte_end":86020,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":199},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":87229,"byte_end":87241,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"kind":"Impl","from":{"krate":0,"index":209},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":87578,"byte_end":87590,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"kind":"Impl","from":{"krate":0,"index":209},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":88689,"byte_end":88698,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":802},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":89568,"byte_end":89573,"line_start":923,"line_end":923,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":841},"to":{"krate":0,"index":221}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":90007,"byte_end":90024,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"kind":"Impl","from":{"krate":0,"index":807},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":90276,"byte_end":90293,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"kind":"Impl","from":{"krate":0,"index":810},"to":{"krate":2,"index":1232}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":90411,"byte_end":90428,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"kind":"Impl","from":{"krate":0,"index":810},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":93156,"byte_end":93163,"line_start":1056,"line_end":1056,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":849},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":94737,"byte_end":94747,"line_start":1112,"line_end":1112,"column_start":34,"column_end":44},"kind":"Impl","from":{"krate":0,"index":240},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":96038,"byte_end":96047,"line_start":1163,"line_end":1163,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":248},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":96536,"byte_end":96545,"line_start":1185,"line_end":1185,"column_start":36,"column_end":45},"kind":"Impl","from":{"krate":0,"index":248},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":97383,"byte_end":97389,"line_start":1217,"line_end":1217,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":256},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":98255,"byte_end":98261,"line_start":1253,"line_end":1253,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":256},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,97,100,97,112,116,111,114,115,92,109,111,100,46,114,115],"byte_start":98367,"byte_end":98373,"line_start":1259,"line_end":1259,"column_start":36,"column_end":42},"kind":"Impl","from":{"krate":0,"index":256},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":112786,"byte_end":112796,"line_start":51,"line_end":51,"column_start":22,"column_end":32},"kind":"Impl","from":{"krate":0,"index":303},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":113621,"byte_end":113633,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":310},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":114296,"byte_end":114308,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":310},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":115987,"byte_end":115997,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":116933,"byte_end":116943,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"kind":"Impl","from":{"krate":0,"index":907},"to":{"krate":2,"index":998}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":121188,"byte_end":121198,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":"Impl","from":{"krate":0,"index":332},"to":{"krate":2,"index":3533}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":121947,"byte_end":121953,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":"Impl","from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123351,"byte_end":123352,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":"Impl","from":{"krate":0,"index":2147483924},"to":{"krate":0,"index":345}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123640,"byte_end":123650,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":"Impl","from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":123846,"byte_end":123856,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"kind":"Impl","from":{"krate":0,"index":351},"to":{"krate":0,"index":345}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":124898,"byte_end":124908,"line_start":76,"line_end":76,"column_start":15,"column_end":25},"kind":"Impl","from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":131686,"byte_end":131696,"line_start":262,"line_end":262,"column_start":15,"column_end":25},"kind":"Impl","from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":133508,"byte_end":133515,"line_start":319,"line_end":319,"column_start":15,"column_end":22},"kind":"Impl","from":{"krate":0,"index":368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":134722,"byte_end":134728,"line_start":365,"line_end":365,"column_start":32,"column_end":38},"kind":"Impl","from":{"krate":0,"index":377},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":135638,"byte_end":135643,"line_start":401,"line_end":401,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":381},"to":{"krate":2,"index":965}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":135814,"byte_end":135819,"line_start":410,"line_end":410,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":381},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":137651,"byte_end":137661,"line_start":474,"line_end":474,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138647,"byte_end":138653,"line_start":516,"line_end":516,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":396},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139412,"byte_end":139417,"line_start":549,"line_end":549,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":400},"to":{"krate":2,"index":965}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139576,"byte_end":139581,"line_start":558,"line_end":558,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":400},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":140662,"byte_end":140673,"line_start":34,"line_end":34,"column_start":22,"column_end":33},"kind":"Impl","from":{"krate":0,"index":931},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":141981,"byte_end":141989,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":142885,"byte_end":142893,"line_start":62,"line_end":62,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":419},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":145334,"byte_end":145340,"line_start":144,"line_end":144,"column_start":19,"column_end":25},"kind":"Impl","from":{"krate":0,"index":428},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":145509,"byte_end":145515,"line_start":153,"line_end":153,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":428},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":147391,"byte_end":147399,"line_start":214,"line_end":214,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":436},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":149239,"byte_end":149250,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":450},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":151123,"byte_end":151135,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":"Impl","from":{"krate":0,"index":934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":155166,"byte_end":155175,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":155328,"byte_end":155337,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"kind":"Impl","from":{"krate":0,"index":943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":155981,"byte_end":155990,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":943},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":156457,"byte_end":156466,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":943},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":156890,"byte_end":156899,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":943},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":157724,"byte_end":157732,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":948},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":158495,"byte_end":158503,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":948},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":158960,"byte_end":158968,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":948},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":159550,"byte_end":159558,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1694},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":159864,"byte_end":159872,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":2,"index":17364},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":160192,"byte_end":160199,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":"Impl","from":{"krate":0,"index":773},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":160616,"byte_end":160624,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":971},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":161579,"byte_end":161595,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":"Impl","from":{"krate":0,"index":499},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162683,"byte_end":162687,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"kind":"Impl","from":{"krate":2,"index":2654},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162739,"byte_end":162744,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":17667},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162793,"byte_end":162804,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"kind":"Impl","from":{"krate":2,"index":17672},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162853,"byte_end":162858,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":17677},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162913,"byte_end":162917,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"kind":"Impl","from":{"krate":2,"index":17425},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":162975,"byte_end":162979,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"kind":"Impl","from":{"krate":2,"index":17477},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":163031,"byte_end":163036,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"kind":"Impl","from":{"krate":2,"index":1820},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":163136,"byte_end":163140,"line_start":143,"line_end":143,"column_start":67,"column_end":71},"kind":"Impl","from":{"krate":3,"index":1428},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":163242,"byte_end":163246,"line_start":145,"line_end":145,"column_start":65,"column_end":69},"kind":"Impl","from":{"krate":3,"index":2507},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":163445,"byte_end":163448,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":2,"index":17315},"to":{"krate":0,"index":491}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":163859,"byte_end":163873,"line_start":13,"line_end":13,"column_start":32,"column_end":46},"kind":"Impl","from":{"krate":0,"index":507},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":166599,"byte_end":166607,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":167109,"byte_end":167117,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":"Impl","from":{"krate":0,"index":971},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":169116,"byte_end":169122,"line_start":52,"line_end":52,"column_start":19,"column_end":25},"kind":"Impl","from":{"krate":0,"index":526},"to":{"krate":2,"index":1213}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":169257,"byte_end":169263,"line_start":59,"line_end":59,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":526},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":169822,"byte_end":169828,"line_start":78,"line_end":78,"column_start":33,"column_end":39},"kind":"Impl","from":{"krate":0,"index":526},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":170786,"byte_end":170793,"line_start":22,"line_end":22,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":541},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":171183,"byte_end":171190,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":541},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":171340,"byte_end":171347,"line_start":51,"line_end":51,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":541},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":174245,"byte_end":174255,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":"Impl","from":{"krate":0,"index":564},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":175029,"byte_end":175039,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":564},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":176708,"byte_end":176714,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":"Impl","from":{"krate":0,"index":978},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177101,"byte_end":177107,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":978},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177796,"byte_end":177803,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":981},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":177906,"byte_end":177913,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":981},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,101,101,46,114,115],"byte_start":179593,"byte_end":179596,"line_start":35,"line_end":35,"column_start":22,"column_end":25},"kind":"Impl","from":{"krate":0,"index":589},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,101,101,46,114,115],"byte_start":180693,"byte_end":180696,"line_start":73,"line_end":73,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":589},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":181104,"byte_end":181115,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"kind":"Impl","from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":181288,"byte_end":181299,"line_start":27,"line_end":27,"column_start":22,"column_end":33},"kind":"Impl","from":{"krate":0,"index":598},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":181965,"byte_end":181976,"line_start":55,"line_end":55,"column_start":31,"column_end":42},"kind":"Impl","from":{"krate":0,"index":598},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":182625,"byte_end":182631,"line_start":83,"line_end":83,"column_start":25,"column_end":31},"kind":"Impl","from":{"krate":0,"index":606},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":182843,"byte_end":182849,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":184439,"byte_end":184451,"line_start":151,"line_end":151,"column_start":25,"column_end":37},"kind":"Impl","from":{"krate":0,"index":613},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":184977,"byte_end":184982,"line_start":172,"line_end":172,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":841},"to":{"krate":0,"index":619}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":188255,"byte_end":188263,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1017},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":189061,"byte_end":189069,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1017},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":189908,"byte_end":189914,"line_start":83,"line_end":83,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1021},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":191185,"byte_end":191191,"line_start":127,"line_end":127,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1021},"to":{"krate":2,"index":3531}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":192723,"byte_end":192731,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":193010,"byte_end":193022,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":"Impl","from":{"krate":0,"index":652},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":194258,"byte_end":194270,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":"Impl","from":{"krate":0,"index":652},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":195181,"byte_end":195186,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1034},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":195764,"byte_end":195769,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":1034},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":196684,"byte_end":196694,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":1037},"to":{"krate":2,"index":1694}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":197316,"byte_end":197326,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1037},"to":{"krate":2,"index":1870}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":198147,"byte_end":198157,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":"Impl","from":{"krate":0,"index":1037},"to":{"krate":2,"index":1877}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7988,"byte_end":7996,"line_start":278,"line_end":278,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1694},"to":{"krate":0,"index":691}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":61414,"byte_end":61415,"line_start":1850,"line_end":1850,"column_start":31,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2147484300},"to":{"krate":0,"index":691}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,116,117,114,110,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,55,46,54,92,115,114,99,92,108,105,98,46,114,115],"byte_start":64919,"byte_end":64928,"line_start":1968,"line_end":1968,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":1099},"to":{"krate":4294967295,"index":4294967295}}]}